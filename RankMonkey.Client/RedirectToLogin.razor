@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@code {

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("RedirectToLogin OnInitializedAsync called");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            var returnUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            Console.WriteLine($"User is not authenticated, current path: {returnUrl}");

            if (string.IsNullOrWhiteSpace(returnUrl))
            {
                NavigationManager.NavigateTo($"/login", forceLoad: false);
            }
            else if (returnUrl.StartsWith("login", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("Already on login page, not redirecting");
            }
            else
            {
                Console.WriteLine($"Redirecting to /login with returnUrl: {returnUrl}");
                NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(returnUrl)}", forceLoad: false);
            }
        }
        else
        {
            Console.WriteLine("User is authenticated");
        }
    }
}