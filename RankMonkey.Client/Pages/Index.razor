@page "/"
@page "/Login"

@using RankMonkey.Client.Auth
@using RankMonkey.Client.Services
@using RankMonkey.Shared.Models

@inject HttpClient Http
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject ILogger<Index> Logger
@inject IConfiguration Configuration
@inject System.Text.Json.JsonSerializerOptions JsonOptions

<h1>RankMonkey</h1>

<AuthorizeView>
    <Authorized>
        <p>Welcome, @context.User.Identity?.Name!</p>
        <button @onclick="SignOut">Sign Out</button>
    </Authorized>
    <NotAuthorized>
        <p>Please sign in to use the app.</p>
        <div id="googleSignInButton"></div>
    </NotAuthorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

@code {
    private string ServerUrl => Configuration["ServerUrl"] ?? "https://rankmonkey.in/";
    private string LoginApi => $"{ServerUrl}api/auth/google";
    private string LogoutApi => $"{ServerUrl}api/auth/logout";
    private string _errorMessage = string.Empty;
    private string ErrorMessage
    {
        get => _errorMessage;
        set
        {
            _errorMessage = value;
            StateHasChanged();
        }
    }

    private static Index? _instance;

    protected override async Task OnInitializedAsync()
    {
        _instance = this;
        await InitializeGoogleSignIn();
    }

    private async Task InitializeGoogleSignIn()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("initializeGoogleSignIn");
            await JsRuntime.InvokeVoidAsync("renderGoogleSignInButton");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error initializing Google Sign-In: {ex.Message}";

            Logger.LogError($"Error initializing Google Sign-In: {ex}");
        }
    }

    [JSInvokable]
    public static async Task HandleGoogleSignIn(string googleToken)
    {
        if (_instance != null)
        {
            await _instance.SignIn(googleToken);
        }
    }

    private async Task SignIn(string googleToken)
    {
        Logger.LogInformation($"SignIn called with token length: {googleToken.Length}");
        var request = new GoogleLoginRequest(googleToken);
        try
        {
            var response = await Http.PostAsJsonAsync(LoginApi, request);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<TokenResponse>(JsonOptions);
                if (token != null)
                {
                    Logger.LogInformation("Login successful");

                    await AuthStateProvider.MarkUserAsAuthenticated(token.Token);

                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    ErrorMessage = "Failed to deserialize token response";
                    Logger.LogError("Failed to deserialize token response");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {response.ReasonPhrase}. Error: {errorContent}";
                Logger.LogError("Login failed: {ReasonPhrase}. Error: {ErrorContent}", response.ReasonPhrase, errorContent);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "SignIn error");
        }
    }

    private async Task SignOut()
    {
        try
        {
            var response = await Http.PostAsync(LogoutApi, null);
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Failed to sign out";
                Logger.LogError("Failed to sign out");
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, "SignOut error");
        }
        finally
        {
            await AuthStateProvider.MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/", true);
        }
    }
}