@page "/"
@using RankMonkey.Shared.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using UserInfo = RankMonkey.Shared.Models.UserInfo
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h1>RankMonkey</h1>

<AuthorizeView>
    <Authorized>
        <p>Welcome, @context.User.Identity?.Name!</p>
        <AppUserForm OnSubmit="SubmitAppUser" />
        <button @onclick="SignOut">Sign Out</button>
    </Authorized>
    <NotAuthorized>
        <p>Please sign in to use the app.</p>
        <button @onclick="SignIn">Sign In with Google</button>
    </NotAuthorized>
</AuthorizeView>

<h2>Debug Info:</h2>
<AuthorizeView>
    <Authorized>
        <p>User is authenticated.</p>
        <p>Claims:</p>
        <ul>
            @foreach (var claim in context.User.Claims)
            {
                <li>@claim.Type: @claim.Value</li>
            }
        </ul>
    </Authorized>
    <NotAuthorized>
        <p>User is not authenticated.</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    const string SERVER_URL = "https://localhost:5001/";

    const string LOGIN_PATH = "api/auth/login";
    const string LOGIN_API = SERVER_URL + LOGIN_PATH;

    const string LOGOUT_PATH = "api/auth/logout";
    const string LOGOUT_API = SERVER_URL + LOGOUT_PATH;


    private void SignIn()
    {
        NavigationManager.NavigateTo(LOGIN_API, true);
    }

    private async Task SignOut()
    {
        await Http.GetAsync(LOGOUT_API);
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/", true);
    }
}