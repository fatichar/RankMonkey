@page "/"
@using RankMonkey.Shared.Models
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Authorization
@using RankMonkey.Client.Auth
@using RankMonkey.Client.Services
@using Serilog
@using UserInfo = RankMonkey.Shared.Models.UserInfo
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject ILogger<Index> Logger

<h1>RankMonkey</h1>

<AuthorizeView>
    <Authorized>
        <p>Welcome, @context.User.Identity?.Name!</p>
        <button @onclick="SignOut">Sign Out</button>
    </Authorized>
    <NotAuthorized>
        <p>Please sign in to use the app.</p>
        <div id="googleSignInButton"></div>
        @* <p>Debug: Google Sign-In button should appear above this line.</p> *@
    </NotAuthorized>
</AuthorizeView>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

@code {
    const string SERVER_URL = "https://localhost:5001/";
    const string LOGIN_PATH = "api/auth/google-login";
    const string LOGIN_API = SERVER_URL + LOGIN_PATH;
    const string LOGOUT_PATH = "api/auth/logout";
    const string LOGOUT_API = SERVER_URL + LOGOUT_PATH;
    private string _errorMessage = string.Empty;
    private string ErrorMessage
    {
        get => _errorMessage;
        set
        {
            _errorMessage = value;
            StateHasChanged();
        }
    }

    private static Index? _instance;

    protected override async Task OnInitializedAsync()
    {
        _instance = this;
        await InitializeGoogleSignIn();
    }

    private async Task InitializeGoogleSignIn()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeGoogleSignIn");
            await JSRuntime.InvokeVoidAsync("renderGoogleSignInButton");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error initializing Google Sign-In: {ex.Message}";

            Logger.LogError($"Error initializing Google Sign-In: {ex}");
        }
    }

    [JSInvokable]
    public static async Task HandleGoogleSignIn(string googleToken)
    {
        if (_instance != null)
        {
            await _instance.SignIn(googleToken);
        }
    }

    private async Task SignIn(string googleToken)
    {
        Logger.LogInformation($"SignIn called with token length: {googleToken.Length}");
        try
        {
            var response = await Http.PostAsJsonAsync(LOGIN_API, googleToken);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (token != null)
                {
                    Logger.LogInformation("Login successful");
                    await LocalStorage.SetItemAsync("authToken", token.Token);
                    await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    ErrorMessage = "Failed to deserialize token response";
                    Logger.LogError("Failed to deserialize token response");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {response.ReasonPhrase}. Error: {errorContent}";
                Logger.LogError("Login failed: {ReasonPhrase}. Error: {ErrorContent}", response.ReasonPhrase, errorContent);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "SignIn error");
        }
    }

    private async Task SignOut()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/", true);
    }

    public class TokenResponse
    {
        [JsonPropertyName("token")]
        public string Token { get; set; }
    }
}