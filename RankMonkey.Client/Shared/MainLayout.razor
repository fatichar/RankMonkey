@using RankMonkey.Client.Services
@using RankMonkey.Client.Components
@inherits LayoutComponentBase
@inject IHttpClientFactory HttpClientFactory
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page">
    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-link" @onclick="Logout">Logout</button>
                </Authorized>
                <NotAuthorized>
                    <a href="login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <RenderModeIndicator />

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        AuthStateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;
        return base.OnInitializedAsync();
    }

    private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        await InvokeAsync(async () =>
        {
            await task;
            StateHasChanged();
        });
    }

    private async Task Logout()
    {
        var client = HttpClientFactory.CreateClient("ServerAPI");
        // Uncomment the following line if you need to notify the server about the logout
        // await client.PostAsync("api/auth/logout", null);
        await AuthStateProvider.MarkUserAsLoggedOut();

        // Wait for the state to be updated
        await AuthStateProvider.GetAuthenticationStateAsync();

        // Force a re-render of the entire application
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
    }
}